{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"MLUtilities.py","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"wfxXRPatCOw7","executionInfo":{"status":"ok","timestamp":1634527261305,"user_tz":360,"elapsed":256,"user":{"displayName":"Karla Gómez","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"12265086717425101194"}}},"source":["# Se importan las librerías necesarias.\n","import numpy as np\n","import pandas as pd\n","from matplotlib import pyplot as plt\n","from sklearn.model_selection import train_test_split\n","from sklearn.model_selection import KFold\n","from sklearn.metrics import confusion_matrix\n","\n","# Se define la función de separación de entrenamiento, validación y prueba.\n","\n","def particionar(entradas, salidas, porcentaje_entrenamiento, porcentaje_validacion, porcentaje_prueba):\n","    temp_size = porcentaje_validacion + porcentaje_prueba\n","    print(temp_size)\n","    x_train, x_temp, y_train, y_temp = train_test_split(entradas, salidas, test_size =temp_size)\n","    if(porcentaje_validacion > 0):\n","        test_size = porcentaje_prueba/temp_size\n","        x_val, x_test, y_val, y_test = train_test_split(x_temp, y_temp, test_size = test_size)\n","    else:\n","        return [x_train, None, x_temp, y_train, None, y_temp]\n","    return [x_train, x_val, x_test, y_train, y_val, y_test]\n","\n","# Se define la función de separación de datasets con K-Fold.\n","\n","def kfold_funcion(datos, k, random_seed):\n","  aleatorio=True\n","  kfold = KFold(k, aleatorio, random_seed)\n","  ciclo = 1\n","\n","  for indices_train, indices_test in kfold.split(datos):\n","      print(\"Ciclo: \"+str(ciclo))\n","      print(\"\\t datos para entrenamiento:\"+str(datos[indices_train]))\n","      print(\"\\t datos para prueba:\"+str(datos[indices_test]))\n","      ciclo+=1\n","\n","# Se define la función de separación de datasets con K-Fold\n","# (el usuario debe poner el K, si K = 1 debe generar un Leave-One-Out Cross Validation).\n","\n","def kfold_funcion_LOOCV(datos, k, random_seed):\n","  k=datos.shape[0]\n","  aleatorio=True\n","  kfold = KFold(k, aleatorio, random_seed)\n","  ciclo = 1\n","\n","  for indices_train, indices_test in kfold.split(datos):\n","      print(\"Ciclo: \"+str(ciclo))\n","      print(\"\\t datos para entrenamiento:\"+str(datos[indices_train]))\n","      print(\"\\t datos para prueba:\"+str(datos[indices_test]))\n","      ciclo+=1\n","\n","# Se define la función de evaluación con matriz de confusión.\n","\n","def c_matrix(y_esperados, y_predichos):\n","  resultado = confusion_matrix(y_esperados, y_predichos)\n","  (TN, FP, FN, TP) = resultado.ravel()\n","  print(\"True positives: \"+str(TP))\n","  print(\"True negatives: \"+str(TN))\n","  print(\"False positives: \"+str(FP))\n","  print(\"False negative: \"+str(FN))\n","\n","  return resultado\n","\n","# Funciones de obtención de Precisión (Accuracy), Sensibilidad y Especificidad.\n","\n","def calcularAccuracy(TP, TN, FP, FN):\n","    accuracy = (TP + TN) / (TP + TN + FP + FN)\n","    accuracy = accuracy * 100\n","    return accuracy\n","\n","def calcularSensibilidad(TP, TN, FP, FN):\n","    sensibilidad = TP / (TP + FN)\n","    sensibilidad = sensibilidad * 100\n","    return sensibilidad\n","\n","def calcularEspecificidad(TP, TN, FP, FN):\n","    especificidad = TN / (TN + FP)\n","    especificidad = especificidad * 100\n","    return especificidad\n","  \n"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"a7hcCc0xaRx6"},"source":[""],"execution_count":null,"outputs":[]}]}